package sim;


/**
* sim/SimCorbaServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from sim.idl
* SÃ¡bado, 7 de Dezembro de 2013 20h44min11s BRT
*/

public abstract class SimCorbaServerPOA extends org.omg.PortableServer.Servant
 implements sim.SimCorbaServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new java.lang.Integer (0));
    _methods.put ("logout", new java.lang.Integer (1));
    _methods.put ("write", new java.lang.Integer (2));
    _methods.put ("writeTo", new java.lang.Integer (3));
    _methods.put ("get_id", new java.lang.Integer (4));
    _methods.put ("startRadar", new java.lang.Integer (5));
    _methods.put ("stopRadar", new java.lang.Integer (6));
    _methods.put ("changeLocation", new java.lang.Integer (7));
    _methods.put ("listNearlyClients", new java.lang.Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // sim/SimCorbaServer/login
       {
         try {
           String nickname = in.read_string ();
           sim.SimCorbaClient client = sim.SimCorbaClientHelper.read (in);
           String $result = null;
           $result = this.login (nickname, client);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (sim.UserExists $ex) {
           out = $rh.createExceptionReply ();
           sim.UserExistsHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // sim/SimCorbaServer/logout
       {
         try {
           String id = in.read_string ();
           this.logout (id);
           out = $rh.createReply();
         } catch (sim.AnonymID $ex) {
           out = $rh.createExceptionReply ();
           sim.AnonymIDHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // sim/SimCorbaServer/write
       {
         try {
           String from = in.read_string ();
           String text = in.read_string ();
           this.write (from, text);
           out = $rh.createReply();
         } catch (sim.AnonymID $ex) {
           out = $rh.createExceptionReply ();
           sim.AnonymIDHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // sim/SimCorbaServer/writeTo
       {
         try {
           String from = in.read_string ();
           String to = in.read_string ();
           String message = in.read_string ();
           this.writeTo (from, to, message);
           out = $rh.createReply();
         } catch (sim.AnonymID $ex) {
           out = $rh.createExceptionReply ();
           sim.AnonymIDHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // sim/SimCorbaServer/get_id
       {
         String nickname = in.read_string ();
         String $result = null;
         $result = this.get_id (nickname);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // sim/SimCorbaServer/startRadar
       {
         String nickname = in.read_string ();
         String location = in.read_string ();
         this.startRadar (nickname, location);
         out = $rh.createReply();
         break;
       }

       case 6:  // sim/SimCorbaServer/stopRadar
       {
         String nickname = in.read_string ();
         this.stopRadar (nickname);
         out = $rh.createReply();
         break;
       }

       case 7:  // sim/SimCorbaServer/changeLocation
       {
         String nickname = in.read_string ();
         String location = in.read_string ();
         String $result = null;
         $result = this.changeLocation (nickname, location);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // sim/SimCorbaServer/listNearlyClients
       {
         String nickname = in.read_string ();
         String $result = null;
         $result = this.listNearlyClients (nickname);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:sim/SimCorbaServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public SimCorbaServer _this() 
  {
    return SimCorbaServerHelper.narrow(
    super._this_object());
  }

  public SimCorbaServer _this(org.omg.CORBA.ORB orb) 
  {
    return SimCorbaServerHelper.narrow(
    super._this_object(orb));
  }


} // class SimCorbaServerPOA
